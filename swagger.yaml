openapi: 3.0.0
info:
  description: |
    This is souvershop server.
  version: "1.0.0"
  title: Swagger souvershop
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "https://souvershop-ff3c13f9139a.herokuapp.com/api/"
  - url: "http://localhost:8888/api/"
tags:
  - name: auth
    description: Auth APIs
  - name: product
    description: Product APIs
  - name: Customer
    description: Customer APIs
  - name: employee
    description: Employee APIs
  - name: grn
    description: GRN APIs
  - name: receipt
    description: Receipt APIs
  - name: review
    description: Review APIs
  - name: category
    description: Category APIs
  - name: owner
    description: Owner APIs

paths:
  /auth/signin:
    post:
      tags:
        - auth
      summary: Login to the application
      description: Login to the application
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                  format: email
                  default: "uio43767@kisoq.com"
                  example: "uio43767@kisoq.com"
                user_password:
                  type: string
                  format: password
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
                  default: "Souvershop@123"
                  example: "Souvershop@123"
              required:
                - user_email
                - user_password
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    format: string
                  user:
                    $ref: "#/components/schemas/user"
        "400":
          description: Invalid email/password supplied
  /auth/register:
    post:
      tags:
        - auth
      summary: Register to the application
      description: Register to the application
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                  format: email
                user_password:
                  type: string
                  format: password
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
              required:
                - user_email
                - user_password
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    format: string
                  user:
                    $ref: "#/components/schemas/user"
        "400":
          description: Invalid email/password supplied
  /auth/login/federated/google:
    get:
      tags:
        - auth
      responses:
        "200":
          description: successful operation
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logout from the application with Google
      description: Logout from the application with Google
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Forgot password
      description: Forgot password
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                  format: email
              required:
                - user_email
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: string
        "400":
          description: Invalid email/password supplied
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset password
      description: Reset password
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                  format: email
                user_password:
                  type: string
                  format: password
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
                reset_pass_token:
                  type: string
                  format: string
              required:
                - user_email
                - user_password
                - reset_pass_token
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: string
        "400":
          description: Invalid email/password supplied
  /auth/refreshtoken:
    post:
      tags:
        - auth
      summary: Refresh token
      description: Refresh token
      operationId: refreshToken
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    format: string
        "400":
          description: Invalid
  /auth/verify-email:
    post:
      tags:
        - auth
      summary: Verify email
      description: Verify email
      operationId: verifyEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                verifytoken:
                  type: string
                  format: string
              required:
                - verifytoken
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: string
        "400":
          description: Invalid email/password supplied
  /category:
    get:
      tags:
        - category
      summary: Get all categories
      description: Get all categories
      operationId: getCategories
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/category"
        "400":
          description: Invalid request
    post:
      tags:
        - category
      summary: Create a new category
      description: Create a new category
      operationId: createCategory
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  format: string
              required:
                - category_name
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          description: Invalid request
  /category/{category_id}:
    get:
      tags:
        - category
      summary: Get category's products by category_id
      description: Get category's products by category_id
      operationId: getProductByCategoryId
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
    put:
      tags:
        - category
      summary: Update category by id
      description: Update category by id
      operationId: updateCategoryById
      security:
        - BearerAuth: []
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: number
            format: int2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  format: string
              required:
                - category_name
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          description: Invalid request
    delete:
      tags:
        - category
      summary: Delete category by id
      description: Delete category by id
      operationId: deleteCategoryById
      security:
        - BearerAuth: []
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
  /product:
    post:
      tags:
        - product
      summary: Create a new product
      description: Create a new product
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                  format: string
                product_description:
                  type: string
                  format: string
                product_price:
                  type: number
                  format: float
                product_quantity:
                  type: number
                  format: integer
                product_image:
                  type: string
                  format: string
                product_category:
                  type: number
                  format: integer
              required:
                - product_name
                - product_description
                - product_price
                - product_quantity
                - product_image
                - product_category
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
    get:
      tags:
        - product
      summary: Get all products
      description: Get all products
      operationId: getProducts
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
  /product/{product_id}:
    get:
      tags:
        - product
      summary: Get product's detail by id
      description: Get product by id
      operationId: getProductById
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
    put:
      tags:
        - product
      summary: Update product's detail by id
      description: Update product by id
      operationId: updateProductById
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: number
            format: int2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                  format: string
                product_description:
                  type: string
                  format: string
                product_price:
                  type: number
                  format: float
                product_quantity:
                  type: number
                  format: integer
                product_image:
                  type: string
                  format: string
                product_category:
                  type: number
                  format: integer
              required:
                - product_name
                - product_description
                - product_price
                - product_quantity
                - product_image
                - product_category
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
    delete:
      tags:
        - product
      summary: Delete product by id
      description: Delete product by id
      operationId: deleteProductById
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful
  /product/inventory:
    get:
      summary: Retrieve a paginated list of product inventory
      description: Fetch a list of products from the inventory with pagination support.
      parameters:
        - name: page
          in: query
          description: The page number to retrieve.
          required: false
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successfully retrieved product inventory.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_items:
                    type: integer
                    description: Total number of products in the inventory.
                  total_pages:
                    type: integer
                    description: Total number of pages available.
                  current_page:
                    type: integer
                    description: Current page number.
                  page_size:
                    type: integer
                    description: Number of items per page.
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Unique identifier for the product.
                        name:
                          type: string
                          description: Name of the product.
                        quantity:
                          type: integer
                          description: Quantity of the product in stock.
                        price:
                          type: number
                          format: float
                          description: Price of the product.
        '400':
          description: Bad request due to invalid query parameters.
        '500':
          description: Internal server error.
  /product/search_random:
    get:
      tags:
        - product
      summary: Get random products
      description: Get random products
      operationId: getRandomProducts
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
  
  
  /grn:
    post:
      tags:
        - grn
      summary: Create a new GRN
      description: Create a new GRN
      operationId: createGrn
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grn_total:
                  type: number
                  format: float
                product_list:
                  type: array
                  items:
                    $ref: "#/components/schemas/product_list"
              required:
                - grn_total
                - product_list
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
    get:
      tags:
        - grn
      summary: Get all GRNs
      description: Get all GRNs with optional filtering by year and month
      operationId: getGrns
      security:
        - BearerAuth: []
      parameters:
        - name: year
          in: query
          description: Filter GRNs by year
          required: false
          schema:
            type: integer
            example: 2000
            minimum: 1990
            maximum: 2024
        - name: month
          in: query
          description: Filter GRNs by month
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 12
            example: 1
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
  /grn/{grn_id}:
    get:
      tags:
        - grn
      summary: Get GRN by id
      description: Get GRN by id
      operationId: getGrnById
      security:
        - BearerAuth: []
      parameters:
        - name: grn_id
          in: path
          description: ID of GRN to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
    put:
      tags:
        - grn
      summary: Update GRN by id
      description: Update GRN by id
      operationId: updateGrnById
      security:
        - BearerAuth: []
      parameters:
        - name: grn_id
          in: path
          description: ID of GRN to return
          required: true
          schema:
            type: number
            format: int2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grn_date:
                  type: string
                  format: date
                grn_total:
                  type: number
                  format: float
                grn_status:
                  type: string
                  format: string
              required:
                - grn_date
                - grn_total
                - grn_status
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
    delete:
      tags:
        - grn
      summary: Delete GRN by id
      description: Delete GRN by id
      operationId: deleteGrnById
      security:
        - BearerAuth: []
      parameters:
        - name: grn_id
          in: path
          description: ID of GRN to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
  /review:
    post:
      tags:
        - review
      summary: Create a new review
      description: Create a new review
      operationId: createReview
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review_content:
                  type: string
                  format: string
                review_rating:
                  type: number
                  format: integer
              required:
                - review_content
                - review_rating
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
    get:
      tags:
        - review
      summary: Get all reviews
      description: Get all reviews
      operationId: getReviews
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
  /review/top:
    get:
      tags:
        - review
      summary: Get top reviews ( Using for Homepage)
      description: Get top reviews
      operationId: getTopReviews
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
  /review/{customer_id}:
    get:
      tags:
        - review
      summary: Get reviews by customer id
      description: Get reviews by customer id
      operationId: getReviewsByCustomerId
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
  /review/product/{product_id}:
    get:
      tags:
        - review
      summary: Get receipts by product id
      description: Get receipts by product id
      operationId: getReceiptsByProductId
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/receipt"
        "400":
          description: Invalid request
  /review/customer/{customer_id}/receipt/{receipt_id}/product/{product_id}:
    put:
      summary: Update a product review
      description: Update a review for a product in a specific receipt by a customer.
      tags:
        - review
      security:
        - BearerAuth: []
      parameters:
        - name: receipt_id
          in: path
          required: true
          description: ID of the receipt.
          schema:
            type: string
        - name: product_id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      requestBody:
        description: Review data to be updated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  format: float
                  description: Rating given to the product.
                comment:
                  type: string
                  description: Comment for the review.
              required:
                - rating
      responses:
        200:
          description: Review updated successfully.
        400:
          description: Invalid request body or parameters.
        404:
          description: Customer, receipt, or product not found.
        500:
          description: Internal server error.
    delete:
      summary: Delete a product review
      description: Delete a review for a product in a specific receipt by a customer.
      tags:
        - review
      parameters:
        - name: customer_id
          in: path
          required: true
          description: ID of the customer.
          schema:
            type: string
        - name: receipt_id
          in: path
          required: true
          description: ID of the receipt.
          schema:
            type: string
        - name: product_id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      responses:
        200:
          description: Review deleted successfully.
        404:
          description: Customer, receipt, or product not found.
        500:
          description: Internal server error.
  /admin/employees:
    get:
      tags:
        - owner
      summary: Get all employees
      description: Get all employees
      operationId: getEmployees
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "400":
          description: Invalid request
  /admin/create_employee:
    post:
      summary: Create a new employee account
      description: This route creates a new employee account. The required fields are sent through form-data, and the file attribute is used for uploading an avatar.
      tags:
        - Employees
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  description: The name of the user
                  example: JohnDoe
                user_password:
                  type: string
                  description: The password for the user
                  example: password123
                user_email:
                  type: string
                  format: email
                  description: The email address of the user
                  example: johndoe@example.com
                file:
                  type: string
                  format: binary
                  description: The avatar file for the user
      responses:
        '201':
          description: Employee account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Employee account created successfully
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing required fields
        '409':
          description: Employee account already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Employee account already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /admin/employees/{employee_id}:
    put:
      tags:
        - owner
      summary: Update employee by id
      description: Update employee by id
      operationId: updateEmployeeById
      security:
        - BearerAuth: []
      parameters:
        - name: employee_id
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  format: string
                user_email:
                  type: string
                  format: email
                user_phoneNumber:
                  type: string
                  format: string
                user_address:
                  type: string
                  format: string
                staff_salary:
                  type: number
                  format: integer
                user_account_status:
                  type: string
                  format: string
              required:
                - user_name
                - user_email
                - user_phoneNumber
                - user_address
                - staff_salary
                - user_account_status
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          description: Invalid request
    post:
      tags:
        - owner
      summary: Create a new employee
      description: Create a new employee
      operationId: createEmployee
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  format: string
                user_email:
                  type: string
                  format: email
                user_password:
                  type: string
                  format: password
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
                user_phoneNumber:
                  type: string
                  format: string
                user_address:
                  type: string
                  format: string
                staff_salary:
                  type: number
                  format: integer
                user_account_status:
                  type: string
                  format: string
              required:
                - user_name
                - user_email
                - user_password
                - user_phoneNumber
                - user_address
                - staff_salary
                - user_account_status
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          description: Invalid request
    delete:
      tags:
        - owner
      summary: Delete employee by id
      description: Delete employee by id
      operationId: deleteEmployeeById
      security:
        - BearerAuth: []
      parameters:
        - name: employee_id
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
  
  /receipt/create_payment_url:
    post:
      tags:
        - Customer
      description: Create payment url
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: Total amount to be paid in the smallest currency unit (e.g., cents for USD).
                  example: 15000
                currency:
                  type: string
                  description: ISO 4217 currency code (e.g., USD, EUR).
                  example: "VND"
                products:
                  type: array
                  description: List of products in the payment request.
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                        description: Unique identifier of the product.
                        example: "03182936-0845-4996-983f-11e0d68e1257"
                      quantity:
                        type: integer
                        description: Quantity of the product.
                        example: 2
                      total:
                        type: number
                        format: float
                        description: Total price for this product in the smallest currency unit.
                        example: 10000
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The payment url.
                    example: "https://payment-url.com"
        "400":
          description: Invalid input or missing parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      type:
                        type: string
                        description: Type of error.
                        example: "invalid_request_error"
                      message:
                        type: string
                        description: Details of the error.
                        example: "Missing required param: amount."
                      param:
                        type: string
                        description: The parameter that caused the error.
                        example: "amount"
                      doc_url:
                        type: string
                        description: URL to Stripe's documentation for the error.
                        example: "https://stripe.com/docs/error-codes/parameter-missing"
  /receipt/payment-return:
    post:
      tags:
        - Customer
      summary: Payment return
      description: Payment return
      operationId: paymentReturn
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: number
                payment_id:
                  type: string
                  format: string
              required:
                - amount
                - payment_id
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: string
        "400":
          description: Invalid request
        "500":
          description: Invalid request
  /receipt/cod:
    post:
      tags:
        - Customer
      summary: Create a cash on delivery transaction
      description: Create a cash on delivery transaction
      operationId: createCodTransaction
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: number
                product_list:
                  type: array
                  items:
                    $ref: "#/components/schemas/product_list"
              required:
                - amount
                - product_list
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: string
        "400":
          description: Invalid request
        "500":
          description: Invalid request
  /report/products:
    get:
      tags:
        - report
      summary: Get Products Report
      description: Fetches a report about products.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
        500:
          description: Server error

  /report/revenue:
    get:
      tags:
        - report
      summary: Get Revenue Report
      description: Fetches a report about revenue.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error

  /report/low-stock:
    get:
      tags:
        - report
      summary: Get Low Stock Report
      description: Fetches a report about products with low stock.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error
  /report/sales_product:
    get:
      tags:
        - report
      summary: Get Sales Product Report
      description: Fetches a report about sales of products.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error
  /report/summary-stock:
    get:
      tags:
        - report
      summary: Get Stock Summary
      description: Fetches a summary report about stock.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error

  /report/buyreport:
    get:
      tags:
        - report
      summary: Get Buy Report
      description: Fetches a report about purchase transactions.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error
  /report/inventory-report:
    get:
      tags:
        - report
      summary: Get Inventory Report
      description: Fetches a report about inventory.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error
  /report/sell_buy:
    get:
      tags:
        - report
      summary: Get Sell and Buy Report
      description: Fetches a comparative report of sell and buy data.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error

  /report/orders:
    get:
      tags:
        - report
      summary: Get Orders Report
      description: Fetches a report about orders.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error

  /report/best_sallers:
    get:
      tags:
        - report
      summary: Get Best Sellers Report
      description: Fetches a report about best-selling products.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error

  /report/linecharts:
    get:
      tags:
        - report
      summary: Get Line Chart Report
      description: Fetches data for generating a line chart report.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        500:
          description: Server error

  /report/get-report:
    get:
      tags:
        - report
      summary: Get General Report
      description: Fetches a general report with optional date filtering.
      security:
        - BearerAuth: []
      parameters:
        - name: begin
          in: query
          description: Start date in dd/MM/yyyy format.
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: End date in dd/MM/yyyy format.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid date format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Server error
  /banner:
    get:
      tags:
        - Banners
      summary: Get all banners
      description: Get all banners
      operationId: getBanners
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/banner"
        "400":
          description: Invalid request
  /banner/{banner_name}:
    post:
      tags:
        - Banners
      summary: Upload a new banner
      description: Upload a new banner for the website. The banner includes an image and additional metadata.
      operationId: uploadBanner
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data: # Use multipart/form-data for file uploads
            schema:
              type: object
              properties:
                banner_image:
                  type: string
                  format: binary # Specifies file upload
                  description: The image file for the banner.
              required:
                - banner_image
      responses:
        "200":
          description: Banner uploaded successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/banner"
        "400":
          description: Invalid request. Please ensure all required fields are provided.
        "401":
          description: Unauthorized. Access token is missing or invalid.
        "500":
          description: Internal server error. Something went wrong on the server.
  /customer/cart:
    get:
      summary: Get all cart items
      description: Retrieve all items in the user's cart.
      tags:
        - Cart
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A list of cart items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CartItem"
        "500":
          description: Internal server error.
    post:
      summary: Add product to cart
      description: Add a product to the user's cart.
      tags:
        - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  example: "03182936-0845-4996-983f-11e0d68e1257"
                quantity:
                  type: integer
                  example: 2
              required:
                - product_id
                - quantity
      responses:
        "200":
          description: Product added to cart successfully.
        "400":
          description: Invalid request payload.
        "404":
          description: Product not found.
        "500":
          description: Internal server error.
  /customer/cart/{product_id}:
    put:
      summary: Edit cart item
      description: Update the quantity of a product in the user's cart.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
          example: "03182936-0845-4996-983f-11e0d68e1257"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 3
              required:
                - quantity
      responses:
        "200":
          description: Cart item updated successfully.
        "500":
          description: Internal server error.
    delete:
      summary: Remove product from cart
      description: Remove a product from the user's cart.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
          example: "03182936-0845-4996-983f-11e0d68e1257"
      responses:
        "200":
          description: Product removed from cart successfully.
        "500":
          description: Internal server error.
  /customer/favourite:
    get:
      summary: Get all favourites
      description: Retrieve all favourite products of the user.
      tags:
        - Favourites
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A list of favourite products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FavouriteItem"
        "500":
          description: Internal server error.
    post:
      summary: Add product to favourites
      description: Add a product to the user's favourites.
      tags:
        - Favourites
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  example: "03182936-0845-4996-983f-11e0d68e1257"
              required:
                - product_id
      responses:
        "200":
          description: Product added to favourites successfully.
        "500":
          description: Internal server error.
    put:
      summary: Remove product from favourites
      description: Remove a product from the user's favourites.
      tags:
        - Favourites
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  example: "03182936-0845-4996-983f-11e0d68e1257"
              required:
                - product_id
      responses:
        "200":
          description: Product removed from favourites successfully.
        "500":
          description: Internal server error.

    delete:
      summary: Remove product from favourites
      description: Remove a product from the user's favourites.
      tags:
        - Favourites
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
          example: "03182936-0845-4996-983f-11e0d68e1257"
      responses:
        "200":
          description: Product removed from favourites successfully.
        "500":
          description: Internal server error.
  /customer/cancel_order/{order_id}:
    post:
      tags:
        - Customer
      summary: Cancel an order
      description: Cancel an order by the customer
      operationId: cancelOrder
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: string
        "400":
          description: Invalid request
        "500":
          description: Invalid request
components:
  schemas:
    CartItem:
      type: object
      properties:
        product_id:
          type: string
        quantity:
          type: integer
    FavouriteItem:
      type: object
      properties:
        product_id:
          type: string
        name:
          type: string
        price:
          type: number
    banner:
      type: object
      properties:
        banner_id:
          type: string
          format: uuid
        banner_image:
          type: string
          format: string
        banner_link:
          type: string
          format: string
    user:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        user_avatar:
          type: string
          format: string
        user_name:
          type: string
          format: string
        user_email:
          type: string
          format: email
        user_password:
          type: string
          format: password
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
        user_phoneNumber:
          type: string
          format: string
        user_address:
          type: string
          format: string
        productList:
          type: array
          items:
            $ref: "#/components/schemas/product_list"
        favouriteList:
          type: array
          items:
            $ref: "#/components/schemas/product_list"
        staff_salary:
          type: number
          format: integer
        user_account_status:
          type: string
          items:
            $ref: "#/components/schemas/user_account_status"
        reset_pass_token:
          type: string
          format: string
        access_token:
          type: string
          format: string
        verify_token:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    role:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
        role_name:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    permission:
      type: object
      properties:
        permission_id:
          type: string
          format: uuid
        permission_name:
          type: string
          format: string
        permission_description:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    category:
      type: object
      properties:
        category_id:
          type: string
          format: uuid
        category_name:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    grn:
      type: object
      properties:
        grn_id:
          type: string
          format: uuid
        grn_date:
          type: string
          format: date
        grn_total:
          type: number
          format: float
        grn_status:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    product:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        product_name:
          type: string
          format: string
        product_description:
          type: string
          format: string
        product_price:
          type: number
          format: float
        product_quantity:
          type: number
          format: integer
        product_image:
          type: string
          format: string
        product_category:
          type: number
          format: integer
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    receipt:
      type: object
      properties:
        receipt_id:
          type: string
          format: uuid
        receipt_date:
          type: string
          format: date
        receipt_total:
          type: number
          format: float
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    review:
      type: object
      properties:
        review_id:
          type: string
          format: uuid
        review_content:
          type: string
          format: string
        review_rating:
          type: number
          format: integer
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    role_user:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    role_permission:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
        permission_id:
          type: string
          format: uuid
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time

    # Nested objects
    product_list:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        product_quantity:
          type: number
          format: integer
        product_total:
          type: number
          format: float

    # Enums
    user_account_status:
      type: object
      enum:
        - active
        - verified
        - pending_verify
        - blocked
        - deleted
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT