openapi: 3.0.0
info:
  description: |
    This is souvershop server.
  version: "1.0.0"
  title: Swagger souvershop
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "https://souvershop-ff3c13f9139a.herokuapp.com/api/"
  - url: "http://localhost:8000/api/"
tags:
  - name: auth
    description: Auth APIs
  - name: product
    description: Product APIs
  - name: Customer
    description: Customer APIs
  - name: grn
    description: GRN APIs
  - name: receipt
    description: Receipt APIs
  - name: review
    description: Review APIs
  - name: category
    description: Category APIs
  - name: owner
    description: Owner APIs

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login to the application
      description: Login to the application
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                  format: email
                user_password:
                  type: string
                  format: password
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
              required:
                - user_email
                - user_password
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    format: string
                  user:
                    $ref: "#/components/schemas/user"
        "400":
          description: Invalid email/password supplied
  /auth/register:
    post:
      tags:
        - auth
      summary: Register to the application
      description: Register to the application
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                  format: email
                user_password:
                  type: string
                  format: password
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
              required:
                - user_email
                - user_password
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    format: string
                  user:
                    $ref: "#/components/schemas/user"
        "400":
          description: Invalid email/password supplied
  /auth/login/federated/google:
    get:
      tags:
        - auth
      responses:
        "200":
          description: successful operation
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logout from the application with Google
      description: Logout from the application with Google
      operationId: logout
      security:
        - api_key: []
      responses:
        "200":
          description: successful operation
  /category:
    get:
      tags:
        - category
      summary: Get all categories
      description: Get all categories
      operationId: getCategories
      security:
        - api_key: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/category"
        "400":
          description: Invalid request
    post:
      tags:
        - category
      summary: Create a new category
      description: Create a new category
      operationId: createCategory
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  format: string
              required:
                - category_name
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          description: Invalid request
  /category/{category_id}:
    get:
      tags:
        - category
      summary: Get category by id
      description: Get category by id
      operationId: getCategoryById
      security:
        - api_key: []
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          description: Invalid request
    put:
      tags:
        - category
      summary: Update category by id
      description: Update category by id
      operationId: updateCategoryById
      security:
        - api_key: []
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: number
            format: int2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  format: string
              required:
                - category_name
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          description: Invalid request
    delete:
      tags:
        - category
      summary: Delete category by id
      description: Delete category by id
      operationId: deleteCategoryById
      security:
        - api_key: []
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
  /product:
    post:
      tags:
        - product
      summary: Create a new product
      description: Create a new product
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                  format: string
                product_description:
                  type: string
                  format: string
                product_price:
                  type: number
                  format: float
                product_quantity:
                  type: number
                  format: integer
                product_image:
                  type: string
                  format: string
                product_category:
                  type: number
                  format: integer
              required:
                - product_name
                - product_description
                - product_price
                - product_quantity
                - product_image
                - product_category
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
    get:
      tags:
        - product
      summary: Get all products
      description: Get all products
      operationId: getProducts
      security:
        - api_key: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
  /product/{product_id}:
    get:
      tags:
        - product
      summary: Get product's detail by id
      description: Get product by id
      operationId: getProductById
      security:
        - api_key: []
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
    put:
      tags:
        - product
      summary: Update product's detail by id
      description: Update product by id
      operationId: updateProductById
      security:
        - api_key: []
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: number
            format: int2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                  format: string
                product_description:
                  type: string
                  format: string
                product_price:
                  type: number
                  format: float
                product_quantity:
                  type: number
                  format: integer
                product_image:
                  type: string
                  format: string
                product_category:
                  type: number
                  format: integer
              required:
                - product_name
                - product_description
                - product_price
                - product_quantity
                - product_image
                - product_category
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          description: Invalid request
    delete:
      tags:
        - product
      summary: Delete product by id
      description: Delete product by id
      operationId: deleteProductById
      security:
        - api_key: []
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful
  /grn:
    post:
      tags:
        - grn
      summary: Create a new GRN
      description: Create a new GRN
      operationId: createGrn
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grn_total:
                  type: number
                  format: float
                product_list:
                  type: array
                  items:
                    $ref: "#/components/schemas/product_list"
              required:
                - grn_total
                - product_list
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
    get:
      tags:
        - grn
      summary: Get all GRNs
      description: Get all GRNs with optional filtering by year and month
      operationId: getGrns
      security:
        - api_key: []
      parameters:
        - name: year
          in: query
          description: Filter GRNs by year
          required: false
          schema:
            type: integer
            example: 2000
            minimum: 1990
            maximum: 2024
        - name: month
          in: query
          description: Filter GRNs by month
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 12
            example: 1
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
  /grn/{grn_id}:
    get:
      tags:
        - grn
      summary: Get GRN by id
      description: Get GRN by id
      operationId: getGrnById
      security:
        - api_key: []
      parameters:
        - name: grn_id
          in: path
          description: ID of GRN to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
    put:
      tags:
        - grn
      summary: Update GRN by id
      description: Update GRN by id
      operationId: updateGrnById
      security:
        - api_key: []
      parameters:
        - name: grn_id
          in: path
          description: ID of GRN to return
          required: true
          schema:
            type: number
            format: int2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grn_date:
                  type: string
                  format: date
                grn_total:
                  type: number
                  format: float
                grn_status:
                  type: string
                  format: string
              required:
                - grn_date
                - grn_total
                - grn_status
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/grn"
        "400":
          description: Invalid request
    delete:
      tags:
        - grn
      summary: Delete GRN by id
      description: Delete GRN by id
      operationId: deleteGrnById
      security:
        - api_key: []
      parameters:
        - name: grn_id
          in: path
          description: ID of GRN to return
          required: true
          schema:
            type: number
            format: int2
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
  /review:
    post:
      tags:
        - review
      summary: Create a new review
      description: Create a new review
      operationId: createReview
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review_content:
                  type: string
                  format: string
                review_rating:
                  type: number
                  format: integer
              required:
                - review_content
                - review_rating
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
    get:
      tags:
        - review
      summary: Get all reviews
      description: Get all reviews
      operationId: getReviews
      security:
        - api_key: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
  /review/top:
    get:
      tags:
        - review
      summary: Get top reviews ( Using for Homepage)
      description: Get top reviews
      operationId: getTopReviews
      security:
        - api_key: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
  /review/{customer_id}:
    get:
      tags:
        - review
      summary: Get reviews by customer id
      description: Get reviews by customer id
      operationId: getReviewsByCustomerId
      security:
        - api_key: []
      parameters:
        - name: customer_id
          in: path
          description: ID of customer to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/review"
        "400":
          description: Invalid request
  /review/product/{product_id}:
    get:
      tags:
        - review
      summary: Get receipts by product id
      description: Get receipts by product id
      operationId: getReceiptsByProductId
      security:
        - api_key: []
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/receipt"
        "400":
          description: Invalid request
  /review/customer/{customer_id}/receipt/{receipt_id}/product/{product_id}:
    put:
      summary: Update a product review
      description: Update a review for a product in a specific receipt by a customer.
      tags:
        - review
      parameters:
        - name: customer_id
          in: path
          required: true
          description: ID of the customer.
          schema:
            type: string
        - name: receipt_id
          in: path
          required: true
          description: ID of the receipt.
          schema:
            type: string
        - name: product_id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      requestBody:
        description: Review data to be updated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  format: float
                  description: Rating given to the product.
                comment:
                  type: string
                  description: Comment for the review.
              required:
                - rating
      responses:
        200:
          description: Review updated successfully.
        400:
          description: Invalid request body or parameters.
        404:
          description: Customer, receipt, or product not found.
        500:
          description: Internal server error.
    delete:
      summary: Delete a product review
      description: Delete a review for a product in a specific receipt by a customer.
      tags:
        - review
      parameters:
        - name: customer_id
          in: path
          required: true
          description: ID of the customer.
          schema:
            type: string
        - name: receipt_id
          in: path
          required: true
          description: ID of the receipt.
          schema:
            type: string
        - name: product_id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      responses:
        200:
          description: Review deleted successfully.
        404:
          description: Customer, receipt, or product not found.
        500:
          description: Internal server error.
  /admin/employees:
    get:
      tags:
        - owner
      summary: Get all employees
      description: Get all employees
      operationId: getEmployees
      security:
        - api_key: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "400":
          description: Invalid request
  /admin/employees/{employee_id}:
    put:
      tags:
        - owner
      summary: Update employee by id
      description: Update employee by id
      operationId: updateEmployeeById
      security:
        - api_key: []
      parameters:
        - name: employee_id
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  format: string
                user_email:
                  type: string
                  format: email
                user_phoneNumber:
                  type: string
                  format: string
                user_address:
                  type: string
                  format: string
                staff_salary:
                  type: number
                  format: integer
                user_account_status:
                  type: string
                  format: string
              required:
                - user_name
                - user_email
                - user_phoneNumber
                - user_address
                - staff_salary
                - user_account_status
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          description: Invalid request
    post:
      tags:
        - owner
      summary: Create a new employee
      description: Create a new employee
      operationId: createEmployee
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  format: string
                user_email:
                  type: string
                  format: email
                user_password:
                  type: string
                  format: password
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
                user_phoneNumber:
                  type: string
                  format: string
                user_address:
                  type: string
                  format: string
                staff_salary:
                  type: number
                  format: integer
                user_account_status:
                  type: string
                  format: string
              required:
                - user_name
                - user_email
                - user_password
                - user_phoneNumber
                - user_address
                - staff_salary
                - user_account_status
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          description: Invalid request
    delete:
      tags:
        - owner
      summary: Delete employee by id
      description: Delete employee by id
      operationId: deleteEmployeeById
      security:
        - api_key: []
      parameters:
        - name: employee_id
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
  /receipt/create_payment_url:
    post:
      tags:
        - Customer
      summary: Create a transaction
      description: Create a transaction
      operationId: createTransaction
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: number
              required:
                - amount
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: string
        "400":
          description: Invalid request
        "500":
          description: Invalid request
components:
  schemas:
    user:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        user_avatar:
          type: string
          format: string
        user_name:
          type: string
          format: string
        user_email:
          type: string
          format: email
        user_password:
          type: string
          format: password
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'
        user_phoneNumber:
          type: string
          format: string
        user_address:
          type: string
          format: string
        productList:
          type: array
          items:
            $ref: "#/components/schemas/product_list"
        favouriteList:
          type: array
          items:
            $ref: "#/components/schemas/product_list"
        staff_salary:
          type: number
          format: integer
        user_account_status:
          type: string
          items:
            $ref: "#/components/schemas/user_account_status"
        reset_pass_token:
          type: string
          format: string
        access_token:
          type: string
          format: string
        verify_token:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    role:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
        role_name:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    permission:
      type: object
      properties:
        permission_id:
          type: string
          format: uuid
        permission_name:
          type: string
          format: string
        permission_description:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    category:
      type: object
      properties:
        category_id:
          type: string
          format: uuid
        category_name:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    grn:
      type: object
      properties:
        grn_id:
          type: string
          format: uuid
        grn_date:
          type: string
          format: date
        grn_total:
          type: number
          format: float
        grn_status:
          type: string
          format: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    product:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        product_name:
          type: string
          format: string
        product_description:
          type: string
          format: string
        product_price:
          type: number
          format: float
        product_quantity:
          type: number
          format: integer
        product_image:
          type: string
          format: string
        product_category:
          type: number
          format: integer
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    receipt:
      type: object
      properties:
        receipt_id:
          type: string
          format: uuid
        receipt_date:
          type: string
          format: date
        receipt_total:
          type: number
          format: float
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    review:
      type: object
      properties:
        review_id:
          type: string
          format: uuid
        review_content:
          type: string
          format: string
        review_rating:
          type: number
          format: integer
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    role_user:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
    role_permission:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
        permission_id:
          type: string
          format: uuid
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time

    # Nested objects
    product_list:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        product_quantity:
          type: number
          format: integer

    # Enums
    user_account_status:
      type: object
      enum:
        - active
        - verified
        - pending_verify
        - blocked
        - deleted
  securitySchemes:
    # petstore_auth:
    #   type: oauth2
    #   flows:
    #     implicit:
    #       authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    #       scopes:
    #         'write:pets': modify pets in your account
    #         'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header